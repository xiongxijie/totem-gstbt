pal@pal-desktop79:/media/pal/E/GnomeApp/totem-gstbt/install/bin$ ./totem 
(totem_object_class_init) 
(totem-object/totem_object_init) 
(gst_bt_demux_class_init) 
GST::gst_soup_http_src_uri_handler_init 
(totem_object_app_handle_local_options) 
NOT g_application_get_is_remote 
(totem-object/totem_object_app_activate)
(totem_player_toolbar_class_init) 
bacon_video_widget_class_init 
(bacon_video_widget_init) 
(gst_bt_demux_class_init) 
(bt_demux_init) 
(gst_bt_demux_init) add sink pad to element
(gstdecodebin2)add static sink pad
(ghostpad_pad_constructed) GST_PAD_UNSET_FLUSHING
GTK-GLSINK:: gst_gtk_gl_sink_init 
GL-SINKBIN::gst_gl_sink_bin_init 
(ghostpad_pad_constructed) GST_PAD_UNSET_FLUSHING
(ghostpad_pad_constructed) GST_PAD_UNSET_FLUSHING
GL-SINKBIN::gst_gl_sink_bin_set_sink 
(ghostpad_pad_constructed) GST_PAD_UNSET_FLUSHING
bacon_time_label_class_init 
(bitfield_scale_init) 
(totem_setup_window) 
(totem-object/video_widget_create) 
(totem_callback_connect) 
(update_volume_sliders) -1.000000
(set video property) PROP_CONTRAST 
(set video property) PROP_SATURATION 
(set video property) PROP_BRIGHTNESS 
(set video property) PROP_HUE 
(bvw/set_audio_filter) caps is NULL 
IN totem_plugins_engine_get_default ,path[]=/home/pal/.local/share/totem/plugins
IN totem_plugins_engine_get_default ,path[]=/media/pal/E/GnomeApp/totem-gstbt/install/lib/x86_64-linux-gnu/totem/plugins
plugin loading:TOTEM_TYPE_VARIABLE_RATE_PLUGIN
plugin loading:TOTEM_TYPE_MOVIE_PROPERTIES_PLUGIN
In totem-movie-properties.c impl_activeate 
plugin loading:TOTEM_TYPE_SCREENSAVER_PLUGIN
plugin loading:TOTEM_TYPE_ROTATION_PLUGIN
plugin loading:TOTEM_TYPE_OPEN_DIRECTORY_PLUGIN
OPEN-DIRECTORY: impl_activate
 (totem_object_plugins_init) 
(totem_object_app_activate) set fileidx as -1 to start pipeline but not playing yet 
(totem_object_set_fileidx), file_idx=-1 
(bacon_video_widget_open) initial case: fileidx is -1 ,progressively SET bvw->pipeline state to READY and then PAUSED
(gstdecodebin2) state changed from READY to PAUSED 
(gstTYPEFIND) start_typefinding 
(bt_demux_change_state) READY_TO_PAUSED GstTaskState is:(1)
(bt_demux_task_setup) setting up task......
(bt_demux_sink_event) 
(bt_demux_sink_event) Not EOS, skip and return
(bvw_bus_message_cb) bvw-pipeline changed state from NULL to READY
(bvw_bus_message_cb) disable updating slider and time label
(bvw_query_timeout) could not get position
(bt_demux_sink_event) 
(bt_demux_sink_event) Not EOS, skip and return
(bt_demux_sink_event) 
(gst_bt_demux_sink_event) atp.save_path = /home/pal/Downloads 
(gst_bt_demux_sink_event) libtorrent async_add_torrent called 
Got add_torrent_alert 
Start download, num files: 2, num pieces: 248, piece length: 32768 
gst_bt_demux_stream_class_init 
gst_bt_demux_stream_init 
(gst_bt_demux_handle_alert) create src pad src_00 (aka.BtDemuxStream) 
(bt_demux_handle_alert) Adding stream src_00 for file Japan/ForBiggerBlazes.mp4 at fileidx 0, start_piece:0, start_ofset:0,end_piece:76,end_ofset:7757 (0,2498125]
gst_bt_demux_stream_init 
(gst_bt_demux_handle_alert) create src pad src_01 (aka.BtDemuxStream) 
(bt_demux_handle_alert) Adding stream src_01 for file Japan/wwa.mp4 at fileidx 1, start_piece:76, start_ofset:7757,end_piece:247,end_ofset:17639 (2498125,8111335]
(bvw_handle_application_message) entering 
(bvw_handle_application_message) Initially start-ppi 
(bvw_reconfigure_ppi_timeout) adding ppi timeout (at 1000ms)
(bvw_handle_application_message) entering 
(totem_got_piece_block_info) entering 
(bitfield_scale_set_piece_block_info) 496,248,2,2
(free_piece_block_info_sd) called 
(update_volume_sliders) 1.000000
(notify_volume_idle_cb) 1.000000
Piece 0 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 1 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 2 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 3 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 4 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 5 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 6 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 7 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 8 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 9 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 10 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 11 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 12 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 13 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 14 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 15 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 16 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 17 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 18 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 19 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 20 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 21 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 22 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 23 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 24 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 25 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 26 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 27 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 28 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 29 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 30 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 31 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 32 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 33 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 34 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 35 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 36 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 37 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 38 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 39 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 40 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 41 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 42 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 43 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 44 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 45 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 46 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 47 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 48 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 49 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 50 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 51 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 52 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 53 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 54 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 55 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 56 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 57 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 58 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 59 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 60 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 61 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 62 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 63 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 64 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 65 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 66 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 67 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 68 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 69 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 70 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 71 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 72 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 73 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 74 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 75 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 76 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
(bt_demux_handle_alert) file at file_idx (0) has finished downloading 
Piece 77 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 78 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 79 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 80 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 81 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 82 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 83 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 84 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 85 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 86 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 87 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 88 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 89 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 90 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 91 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 92 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 93 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 94 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 95 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 96 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 97 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 98 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 99 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 100 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 101 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 102 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 103 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 104 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 105 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 106 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 107 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 108 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 109 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 110 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 111 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 112 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 113 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 114 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 115 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 116 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 117 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 118 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 119 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 120 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 121 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 122 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 123 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 124 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 125 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 126 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 127 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 128 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 129 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 130 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 131 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 132 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 133 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 134 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 135 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 136 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 137 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 138 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 139 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 140 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 141 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 142 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 143 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 144 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 145 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 146 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 147 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 148 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 149 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 150 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 151 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 152 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 153 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 154 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 155 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 156 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 157 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 158 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 159 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 160 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 161 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 162 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 163 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 164 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 165 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 166 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 167 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 168 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 169 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 170 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 171 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 172 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 173 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 174 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 175 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 176 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 177 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 178 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 179 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 180 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 181 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 182 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 183 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 184 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 185 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 186 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 187 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 188 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 189 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 190 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 191 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 192 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 193 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 194 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 195 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 196 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 197 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 198 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 199 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 200 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 201 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 202 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 203 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 204 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 205 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 206 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 207 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 208 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 209 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 210 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 211 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 212 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 213 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 214 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 215 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 216 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 217 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 218 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 219 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 220 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 221 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 222 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 223 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 224 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 225 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 226 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 227 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 228 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 229 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 230 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 231 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 232 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 233 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 234 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 235 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 236 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 237 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 238 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 239 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 240 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 241 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 242 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 243 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 244 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 245 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 246 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:1) 
Piece 247 completed (down: 0 kb/s, up: 0 kb/s, peers: 0, prio:4) 
(bt_demux_handle_alert) file at file_idx (1) has finished downloading 
Got torrent_checked_alert
(bvw_handle_application_message) entering 
(bvw_handle_application_message) stop-ppi 
(gst_bt_demux_get_ppi) empty, post one
(bvw_reconfigure_ppi_timeout) removing ppi timeout
(gst_bt_demux_finished_piece_info) we called
(bvw_handle_application_message) entering 
(bitfield_scale_set_whole_piece_finished)
(We are seeder) 
(IN bvw_handle_element_message_async) 
(bvw_handle_element_message) src_name is:btdemux,type_name is:btdemux-video-info  
(bvw) fname is Japan/ForBiggerBlazes.mp4
(bvw) fpath is /home/pal/Downloads/Japan/ForBiggerBlazes.mp4
(btdemux-video-info) Key: 0, FileName: Japan/ForBiggerBlazes.mp4, FullPath: /home/pal/Downloads/Japan/ForBiggerBlazes.mp4
(bvw) fname is Japan/wwa.mp4
(bvw) fpath is /home/pal/Downloads/Japan/wwa.mp4
(btdemux-video-info) Key: 1, FileName: Japan/wwa.mp4, FullPath: /home/pal/Downloads/Japan/wwa.mp4
(bacon_video_widget_retrieve_btdemux_video_info) Got it 
(totem_got_torrent_videos_info) Loop item, Fidx: 0, FileName: Japan/ForBiggerBlazes.mp4, FullPath: /home/pal/Downloads/Japan/ForBiggerBlazes.mp4
(totem_playlist_add_one_row_impl) 0 Japan/ForBiggerBlazes.mp4 /home/pal/Downloads/Japan/ForBiggerBlazes.mp4
(totem_got_torrent_videos_info) Loop item, Fidx: 1, FileName: Japan/wwa.mp4, FullPath: /home/pal/Downloads/Japan/wwa.mp4
(totem_playlist_add_one_row_impl) 1 Japan/wwa.mp4 /home/pal/Downloads/Japan/wwa.mp4
(totem_got_torrent_videos_info) probe: len of playlist is 2
(totem_object_set_current_fileidx_and_play) get current fileidx 0 from totem-playlist 
totem_object_set_fileidx_and_play, file_index=0 
(totem_object_set_fileidx), file_idx=0 
(totem_object_set_fileidx), file_idx=0 gonna call bacon_video_widget_open
(bacon_video_widget_open) set cur_video_fileidx_within_tor to 0
(btdemux/update_requested_stream) desired fileidx 0 
(update_requested_stream) Mark stream of fileidx 0 as Requested 
(bt_demux_stream_activate) waiting lock
(bt_demux_stream_activate) recovery lock
(bt_demux_stream_activate) Modifying thiz->current_piece to -1 (start_piece minus one) 
(bt_demux_stream_activate) clearing historical cur_buffering_flags for activate stream
(bt_demux_stream_activate) Activating stream 'src_00', start: (0), start_offset: 0, end: 76, end_offset: 7757, current: (-1) buffering(No)
(bt_demux_stream_activate) unlock
(gst_bt_demux_switch_streams) Switching to stream 'src_00', reading piece 0, current: -1, buffering(No)
(gst_bt_demux_switch_streams) call read_piece() on piece 0
(btdemux/update_requested_stream) stream-idx(1) disable undesired streams(src pads)
(btdemux/update_requested_stream) stream-idx(1) DISABLE gst_pad_set_active ok
(bacon_video_widget_open) reset seekable back to unknown state (which is -1)
mark_popup_busy 0x5842d2734e50, opening file
(totem_playlist_get_current_full_path) /home/pal/Downloads/Japan/ForBiggerBlazes.mp4 
In totem_movie_properties_plugin_fileidx_opened 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(0)
(bt_demux_handle_alert) stream-idx(0) Create the pad if needed and add the pad to element (0)
(bt_demux_handle_alert) stream-idx(0) ENABLE gst_pad_set_active ok
(on_btdemux_pad_added) btdemux src pad added: src_00
(on_btdemux_pad_added) Successfully linked btdemux src pad (src_00) to decodebin sink pad 
(on_btdemux_pad_added) gst_pad_is_active (pad) is 1 
(on_btdemux_pad_added) Stream-start event pushed on pad 'src_00'
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(0), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 0 
(totem_playlist_get_current_full_path) /home/pal/Downloads/Japan/ForBiggerBlazes.mp4 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_check_no_more_pads) We're done... Sending no more pads 
(on_btdemux_no_more_pads) on no more pads: src_00
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(0)
(totem_object_play) 
(bacon_video_widget_play) cur_state:READY
play_starting_cb 
-unmark_popup_busy opening file
(bacon_video_widget_play) SET bvw->pipeline state to PLAYING
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:0, end piece idx:76],current_piece:-1,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type not emitted yet
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(-1), ipc_data->piece(0)
(bt_demux_stream_push_loop) recovery lock (-1)
(gst_bt_demux_buffer_new) thiz->start_piece=0, piece=0, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (0) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Push SEGMENT event, start_byte=0, end_byte=2498125 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from -1 to 0 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (0) 
(gstTYPEFIND) gst_type_find_element_emit_have_type 
GST-DECODEBIN::type_found, it is video/quicktime 
-unmark_popup_busy paused
(totem_got_torrent_videos_info) gotta free the GList* 
(ghostpad_pad_constructed) GST_PAD_UNSET_FLUSHING
(qtdemux_init) 
(qtdemux_sink_activate) activating push 
(qtdemux_handle_sink_event) GST_EVENT_STREAM_START 
(gst_qtdemux_process_adapter) demux->state=<INITIAL> 
(qtdemux_handle_sink_event) GST_EVENT_STREAM_START 
(gst_qtdemux_process_adapter) demux->state=<INITIAL> 
(qtdemux_chain) Received buffer size:32768 demux offset:0
(qtdemux_chain) pushing in inbuf 0x72d4200021f0,neededbytes:16,available: 32768
(gst_qtdemux_process_adapter) demux->state=<INITIAL> 
(gst_qtdemux_check_seekability) seekable:1, start:0 stop:2498125
(qtdemux_process_adapter) InQTDEMUX_STATE_INITIAL, Peeking found [ftyp] size:24
(qtdemux_process_adapter) already buffering still no moov header, set state to QTDEMUX_STATE_HEADER, set demux->neededbytes=24
(qtdemux_process_adapter) In QTDEMUX_STATE_HEADER, fourcc is ftyp
(qtdemux_process_adapter) only go back to the mdat if there are samples to play first_mdat=18446744073709551615
(qtdemux_process_adapter) In QTDEMUX_STATE_HEADER, set demux->offset+=demux->neededbytes(24) 
(qtdemux_process_adapter) In QTDEMUX_STATE_HEADER, set demux->neededbytes=16 and demux->state back to QTDEMUX_STATE_INITIAL 
(qtdemux_process_adapter) InQTDEMUX_STATE_INITIAL, Peeking found [moov] size:6373
(qtdemux_process_adapter) already buffering still no moov header, set state to QTDEMUX_STATE_HEADER, set demux->neededbytes=6373
(qtdemux_process_adapter) In QTDEMUX_STATE_HEADER, fourcc is moov
(qtdemux_process_adapter) Parsing [moov] 
(qtdemux_process_adapter) demux->last_moov_offset= 24
(qtdemux_parse_moov)parsing moov atom!!! 
(qtdemux_parse_tree) we have read the complete moov node now at parse_tree 
(_create_stream), stream_id=04183bb00fcb91cce89f3c8c35a0639a3278f7eab97c2d084a7b2cd0687ca6eb/00/001 
(qtdemux_stbl_init) [stsz] stream->sample_size=0, stream->n_samples=360 
(qtdemux_stbl_init), [stsc] stream->n_samples_per_chunk=3 
(qtdemux_stbl_init) allocating n_samples 360, (guint)sizeof(QtDemuxSample) is 32
(qtdemux_parse_segments) created segment 0 time 0:00:00.000000000, media_start (0:00:00.000000000), media_stop (0:00:14.995000000), duration 0:00:14.995000000, timescale 48000
(_create_stream), stream_id=04183bb00fcb91cce89f3c8c35a0639a3278f7eab97c2d084a7b2cd0687ca6eb/00/002 
(qtdemux_stbl_init) [stsz] stream->sample_size=0, stream->n_samples=647 
(qtdemux_stbl_init), [stsc] stream->n_samples_per_chunk=9 
(qtdemux_stbl_init) allocating n_samples 647, (guint)sizeof(QtDemuxSample) is 32
(qtdemux_parse_segments), no segments, create one dummy segment to play the complete trak 0:00:15.023310657 
(qtdemux_prepare_streams) num: 2 
(qtdemux_add_stream) adding pad video_0 
(ghostpad_pad_constructed) GST_PAD_UNSET_FLUSHING
FFMPEG,GST-AVVIDEC:: gst_ffmpegviddec_set_format
(qtdemux_add_stream) adding pad audio_0 
(ghostpad_pad_constructed) GST_PAD_UNSET_FLUSHING
(gst_qtdemux_map_and_push_segments) 
(qtdemux_activate_segment) (video_0) activate segment 0, offset 0:00:00.000000000
(stream_segment_get_boundaries) (video_0) seg_time = 0:00:00.000000000 
(stream_segment_get_boundaries) (video_0) result is start=0:00:00.000000000,stop=0:00:14.995000000,time=0:00:00.000000000
(qtdemux_stream_update_segment) (video_0) new segment 0 from 0:00:00.000000000 to 0:00:14.995000000,time 0:00:00.000000000 
(gst_qtdemux_push_tags) Checking pad qtdemux0:video_0 for tags
(qtdemux_activate_segment) (audio_0) activate segment 0, offset 0:00:00.000000000
(stream_segment_get_boundaries) (audio_0) seg_time = 0:00:00.000000000 
(stream_segment_get_boundaries) (audio_0) result is start=0:00:00.000000000,stop=0:00:15.021666666,time=0:00:00.000000000
(qtdemux_stream_update_segment) (audio_0) new segment 0 from 0:00:00.000000000 to 0:00:15.021666666,time 0:00:00.000000000 
(gst_qtdemux_push_tags) Checking pad qtdemux0:audio_0 for tags
(gst_qtdemux_push_tags) Checking pad qtdemux0:video_0 for tags
(gst_qtdemux_push_tags) Checking pad qtdemux0:audio_0 for tags
(qtdemux_process_adapter) Finished parsing the header 
(qtdemux_process_adapter) only go back to the mdat if there are samples to play first_mdat=18446744073709551615
(qtdemux_process_adapter) In QTDEMUX_STATE_HEADER, set demux->offset+=demux->neededbytes(6373) 
(qtdemux_process_adapter) In QTDEMUX_STATE_HEADER, set demux->neededbytes=16 and demux->state back to QTDEMUX_STATE_INITIAL 
(qtdemux_process_adapter) InQTDEMUX_STATE_INITIAL, Peeking found [mdat] size:2491728
(qtdemux_process_adapter) FOURCC_mdat.  already got moov header
(qtdemux_process_adapter) FOURCC_mdat. we have the headers, start playback, state set to QTDEMUX_STATE_MOVIE, and set neededbytes to 47737
(bt_demux_stream_push_loop) Luckily we have next piece 1, call read_piece() on it, current:0
(bt_demux_stream_push_loop) unlock cur:(0)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:0, end piece idx:76],current_piece:0,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(1)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(1), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 1 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(1)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(0), ipc_data->piece(1)
(bt_demux_stream_push_loop) recovery lock (0)
(gst_bt_demux_buffer_new) thiz->start_piece=0, piece=1, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (1) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 0 to 1 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (1) 
(qtdemux_chain) Received buffer size:32768 demux offset:6397
(qtdemux_chain) pushing in inbuf 0x72d4200f9920,neededbytes:47737,available: 59139
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(qtdemux_drop_data) dropping 8 bytes 
(bt_demux_stream_push_loop) Luckily we have next piece 2, call read_piece() on it, current:1
(bt_demux_stream_push_loop) unlock cur:(1)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:0, end piece idx:76],current_piece:1,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(2)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(2), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 2 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(2)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(1), ipc_data->piece(2)
(bt_demux_stream_push_loop) recovery lock (1)
(gst_bt_demux_buffer_new) thiz->start_piece=0, piece=2, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (2) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 1 to 2 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (2) 
(qtdemux_chain) Received buffer size:32768 demux offset:61428
(qtdemux_chain) pushing in inbuf 0x72d4200e7fd0,neededbytes:7663,available: 36876
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 3, call read_piece() on it, current:2
(bt_demux_stream_push_loop) unlock cur:(2)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:0, end piece idx:76],current_piece:2,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(3)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(3), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 3 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(3)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(2), ipc_data->piece(3)
(bt_demux_stream_push_loop) recovery lock (2)
(gst_bt_demux_buffer_new) thiz->start_piece=0, piece=3, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (3) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 2 to 3 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (3) 
(qtdemux_chain) Received buffer size:32768 demux offset:97915
(qtdemux_chain) pushing in inbuf 0x72d4202500c0,neededbytes:3452,available: 33157
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bvw/on_pad_added for decodebin) :src_0
decodebin's Video pad detected.
(bvw_stream_changed_cb) 
(caps_set) video decoder caps: fps_n: 24000, fps_d: 1001, width: 1280, height: 720 
(bvw_update_stream_info) emit got-metadata 
(on_got_metadata_event) 
(totem_get_nice_name_for_stream) emit_metadata_updated 
(totem-object/on_playlist_change_name)  got title to update player header Japan/ForBiggerBlazes.mp4
(bvw/on_pad_added for decodebin) :src_1
decodebin's Audio pad detected.
(bvw_stream_changed_cb) 
(caps_set) video decoder caps: fps_n: 24000, fps_d: 1001, width: 1280, height: 720 
(bvw_update_stream_info) emit got-metadata 
(on_got_metadata_event) 
(totem_get_nice_name_for_stream) emit_metadata_updated 
(totem-object/on_playlist_change_name)  got title to update player header Japan/ForBiggerBlazes.mp4
GTK-GLSINK::gst_gtk_gl_sink_event: stream-start 
GTK-GLSINK::gst_gtk_gl_sink_event: caps 
(bvw_update_tags) gain audio Tags: 0x72d40c001520A 
(bvw_update_tags) emit got-metadata 
(on_got_metadata_event) 
(totem_get_nice_name_for_stream) emit_metadata_updated 
(totem-object/on_playlist_change_name)  got title to update player header Japan/ForBiggerBlazes.mp4
(bvw_update_tags) gain audio Tags: 0x72d420077260A 
(bvw_update_tags) emit got-metadata 
(on_got_metadata_event) 
(totem_get_nice_name_for_stream) emit_metadata_updated 
(totem-object/on_playlist_change_name)  got title to update player header Japan/ForBiggerBlazes.mp4
(bvw_update_tags) Pipeline sent audio tags update with no changes 
(bvw_update_tags) gain audio Tags: 0x72d40c003380A 
(bvw_update_tags) emit got-metadata 
(on_got_metadata_event) 
(totem_get_nice_name_for_stream) emit_metadata_updated 
(totem-object/on_playlist_change_name)  got title to update player header Japan/ForBiggerBlazes.mp4
GTK-GLSINK::gst_gtk_gl_sink_event: segment 
GTK-GLSINK::gst_gtk_gl_sink_event: tag 
GTK-GLSINK::gst_gtk_gl_sink_event: tag 
GTK-GLSINK::gst_gtk_gl_sink_event: tag 
(bvw_update_tags) gain video Tags: 0x72d424000d80A 
(bvw_update_tags) emit got-metadata 
(on_got_metadata_event) 
(totem_get_nice_name_for_stream) emit_metadata_updated 
(totem-object/on_playlist_change_name)  got title to update player header Japan/ForBiggerBlazes.mp4
(bvw_update_tags) Pipeline sent video tags update with no changes 
(bvw_update_tags) Pipeline sent video tags update with no changes 
(gst_bt_demux_change_state) GstTaskState is 0, transition is 28
(bvw_bus_message_cb) bvw-pipeline changed state from READY to PAUSED
(bvw_bus_message_cb) disable updating slider and time label
(bacon_video_widget_update_and_get_seekable) seeking query says the stream is seekable 
(got_time_tick) From now on, (Initial) the stream become seekable 
(update_current_time) From now on, We get the stream_length, which is 15021 
(caps_set) video decoder caps: fps_n: 24000, fps_d: 1001, width: 1280, height: 720 
(bvw_update_stream_info) emit got-metadata 
(on_got_metadata_event) 
(totem_get_nice_name_for_stream) emit_metadata_updated 
(totem-object/on_playlist_change_name)  got title to update player header Japan/ForBiggerBlazes.mp4
(bvw_bus_message_cb) In GST_MESSAGE_ASYNC_DONE case: Maybe starting deferred playback after seek
(bacon_video_widget_play) cur_state:PLAYING
(bvw_bus_message_cb) bvw-pipeline changed state from PAUSED to PLAYING
(bvw_bus_message_cb) resume updating slider and time label
(bvw_reconfigure_tick_timeout) adding tick timeout (at 200ms) 
(bvw_update_tags) gain audio Tags: 0x72d40c007c40A 
(bvw_update_tags) emit got-metadata 
(on_got_metadata_event) 
(totem_get_nice_name_for_stream) emit_metadata_updated 
(totem-object/on_playlist_change_name)  got title to update player header Japan/ForBiggerBlazes.mp4
(totem-object/seek_slider_changed_cb) both enter 
(totem-object/seek_slider_changed_cb) seek_lock == FALSE 
(bvw_update_tags) gain audio Tags: 0x72d40c100bd0A 
(bvw_update_tags) emit got-metadata 
(on_got_metadata_event) 
(totem_get_nice_name_for_stream) emit_metadata_updated 
(totem-object/on_playlist_change_name)  got title to update player header Japan/ForBiggerBlazes.mp4
(bt_demux_stream_push_loop) Luckily we have next piece 4, call read_piece() on it, current:3
(bt_demux_stream_push_loop) unlock cur:(3)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:0, end piece idx:76],current_piece:3,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(4)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(4), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 4 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(4)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(3), ipc_data->piece(4)
(bt_demux_stream_push_loop) recovery lock (3)
(gst_bt_demux_buffer_new) thiz->start_piece=0, piece=4, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (4) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 3 to 4 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (4) 
(qtdemux_chain) Received buffer size:32768 demux offset:130026
(qtdemux_chain) pushing in inbuf 0x72d420242960,neededbytes:11380,available: 33814
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 5, call read_piece() on it, current:4
(bt_demux_stream_push_loop) unlock cur:(4)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:0, end piece idx:76],current_piece:4,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(5)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(5), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 5 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(5)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(4), ipc_data->piece(5)
(bt_demux_stream_push_loop) recovery lock (4)
(gst_bt_demux_buffer_new) thiz->start_piece=0, piece=5, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (5) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 4 to 5 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (5) 
(qtdemux_chain) Received buffer size:32768 demux offset:160373
(qtdemux_chain) pushing in inbuf 0x72d4200f9920,neededbytes:3525,available: 36235
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(totem-object/seek_slider_changed_cb) both enter 
(totem-object/seek_slider_changed_cb) seek_lock == FALSE 
(totem-object/seek_slider_changed_cb) both enter 
(totem-object/seek_slider_changed_cb) seek_lock == FALSE 
(bt_demux_stream_push_loop) Luckily we have next piece 6, call read_piece() on it, current:5
(bt_demux_stream_push_loop) unlock cur:(5)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:0, end piece idx:76],current_piece:5,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(6)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(6), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 6 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(6)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(5), ipc_data->piece(6)
(bt_demux_stream_push_loop) recovery lock (5)
(gst_bt_demux_buffer_new) thiz->start_piece=0, piece=6, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (6) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 5 to 6 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (6) 
(qtdemux_chain) Received buffer size:32768 demux offset:191824
(qtdemux_chain) pushing in inbuf 0x72d420251ce0,neededbytes:5981,available: 37552
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(totem-object/seek_slider_changed_cb) both enter 
(totem-object/seek_slider_changed_cb) seek_lock == FALSE 
(totem-object/seek_slider_changed_cb) both enter 
(totem-object/seek_slider_changed_cb) seek_lock == FALSE 
(totem-object/seek_slider_changed_cb) both enter 
(totem-object/seek_slider_changed_cb) seek_lock == FALSE 
(bvw_update_tags) gain audio Tags: 0x72d40c002f20A 
(bvw_update_tags) emit got-metadata 
(on_got_metadata_event) 
(totem_get_nice_name_for_stream) emit_metadata_updated 
(bt_demux_stream_push_loop) Luckily we have next piece 7, call read_piece() on it, current:6
(bt_demux_stream_push_loop) unlock cur:(6)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:0, end piece idx:76],current_piece:6,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(totem-object/on_playlist_change_name)  got title to update player header Japan/ForBiggerBlazes.mp4
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(7)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(7), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 7 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(7)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(6), ipc_data->piece(7)
(bt_demux_stream_push_loop) recovery lock (6)
(gst_bt_demux_buffer_new) thiz->start_piece=0, piece=7, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (7) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 6 to 7 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (7) 
(qtdemux_chain) Received buffer size:32768 demux offset:229090
(qtdemux_chain) pushing in inbuf 0x72d42007b350,neededbytes:3996,available: 33054
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 8, call read_piece() on it, current:7
(bt_demux_stream_push_loop) unlock cur:(7)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:0, end piece idx:76],current_piece:7,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(8)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(8), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 8 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(8)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(7), ipc_data->piece(8)
(bt_demux_stream_push_loop) recovery lock (7)
(gst_bt_demux_buffer_new) thiz->start_piece=0, piece=8, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (8) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 7 to 8 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (8) 
(qtdemux_chain) Received buffer size:32768 demux offset:261734
(qtdemux_chain) pushing in inbuf 0x72d420247140,neededbytes:548,available: 33178
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(totem-object/seek_slider_changed_cb) both enter 
(totem-object/seek_slider_changed_cb) seek_lock == FALSE 
(totem-object/seek_slider_pressed_cb) enter 
mark_popup_busy 0x5842d2734e50, seek started
(totem-object/seek_slider_changed_cb) both enter 
(totem-object/seek_slider_changed_cb), pos is 0.487603 
(totem_object_seek) seek pos:0.487603 
(bacon_video_widget_seek) Seeking to 0.49% 0:00:07.324289256
(bacon_video_widget_seek_time) Seeking to 0:00:07.324000000 
(bacon_video_widget_seek_time) No pending seek, just do it 
(bacon_video_widget_seek_time_no_lock) SET bvw->pipeline state to PAUSED, cur_state:PLAYING
(gst_bt_demux_change_state) GstTaskState is 0, transition is 35
(bacon_video_widget_seek_time_no_lock) Call gst_element_seek on pipeline 
GST-DECODEBIN:: gst_decode_pad_event seek 
(bt_demux_stream_event) Got Event, GST_EVENT_SEEK 
(bt_demux_stream_seek) format is not GST_FORMAT_BYTES 
(qtdemux_do_push_seek) 
(qtdemux_adjust_seek) 
(qtdemux_find_segment) (video_0) find segment for 0:00:07.324000000, found 0 
(qtdemux_find_index_linear) convert media_time (0:00:07.324000000) to mov format, mov_time=351552,timescale=48000 
(qtdemux_find_index_linear) (video_0) found sample index 175 at 0:00:07.324000000 
(qtdemux_find_keyframe) find_keyframe, (video_0) index before index 175 gave 136 
(qtdemux_find_segment) (audio_0) find segment for 0:00:07.324000000, found 0 
(qtdemux_find_index_linear) convert media_time (0:00:07.324000000) to mov format, mov_time=322989,timescale=44100 
(qtdemux_find_index_linear) (audio_0) found sample index 315 at 0:00:07.324000000 
(qtdemux_find_keyframe) find_keyframe, (audio_0) index before index 315 gave 315 
(qtdemux_do_push_seek) corresponding BYTE position 1302278 
(qtdemux_do_push_seek) push BYTE seek event, cur_type:1, stop_type:0, cur:1302278. stop:-1 

(bt_demux_stream_event) Got Event, GST_EVENT_SEEK 
(bt_demux_stream_seek) info 0,0 76,7757 
(bt_demux_stream_seek) rate:1.000000, start:1302278, stop:2498125 
(bt_demux_stream_seek) push flush_start 
(qtdemux_handle_sink_event) got GST_EVENT_FLUSH_START 
GTK-GLSINK::gst_gtk_gl_sink_event: flush-start 
(gst_pad_push_data) goto flushing 
(gst_pad_push_data) pushing, but pad was flushing
(bt_demux_stream_push_loop)!!Failed Pushing buffer,actual size: 32768, file: 0, piece: (8) ret=-2
(bt_demux_stream_push_loop) it is flushing  
(bt_demux_stream_push_loop) otherwise, send eos downstream to avoid blcking on push_loop 
(bt_demux_stream_push_loop) Sending EOS event on file 0, piece:8 
(store_sticky_event) pad is flushing 
(gst_pad_push_event) eventname:eos , we are flushing 
(gst_pad_push_event) eventname:eos , we are done 
(bt_demux_stream_seek) waiting lock (0)
(bt_demux_stream_push_loop) due to EOS or internal Error, suspend call read_piece() on next piece 9, current:8, end/last:76 
(bt_demux_stream_push_loop) unlock cur:(8)
bt_demux_stream_push_loop, END 
(bt_demux_stream_seek) recovery lock (0)
(bt_demux_stream_seek) fileidx(0) start_byte_global = 0
(bt_demux_stream_seek) Seeking to, start:39, start_offset:24326, end:76, end_offset:7757, start_byte1302278,end_byte2498125 
(bt_demux_stream_seek) before activate, clear previous Three-Piece-Area [9,11]
(bt_demux_stream_activate) waiting lock
(bt_demux_stream_activate) recovery lock
(bt_demux_stream_activate) Modifying thiz->current_piece to 38 (start_piece minus one) 
(bt_demux_stream_activate) clearing historical cur_buffering_flags for activate stream
(bt_demux_stream_activate) Activating stream 'src_00', start: (39), start_offset: 24326, end: 76, end_offset: 7757, current: (38) buffering(No)
(bt_demux_stream_activate) unlock
(bt_demux_stream_seek) Starting SEEK stream 'src_00', reading piece 39, current: 38 buffering(No) 
(bt_demux_stream_seek) call read_piece() on piece 39
(bt_demux_stream_seek) unlock lock (0)
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(39)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(39), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 39 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(39)
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:38,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(38), ipc_data->piece(39)
(bt_demux_stream_push_loop) recovery lock (38)
(bvw_bus_message_cb) bvw-pipeline changed state from PLAYING to PAUSED
(bvw_bus_message_cb) disable updating slider and time label
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=39, this buffer actual size:8442 
(bt_demux_stream_push_loop) Received piece (39) of size 32768 and actual size 8442 on file 0 
(bt_demux_stream_push_loop) Push SEGMENT event, start_byte=1302278, end_byte=2498125 
(bt_demux_stream_push_loop) since flush_start sent, send flush_stop then 
(bvw_reconfigure_tick_timeout) removing tick timeout 
(qtdemux_handle_sink_event) got GST_EVENT_FLUSH_STOP 
(bvw_bus_message_cb) In GST_MESSAGE_ASYNC_DONE case: Maybe starting deferred playback after seek
(bacon_video_widget_play) cur_state:PAUSED
play_starting_cb 
-unmark_popup_busy opening file
(bacon_video_widget_play) SET bvw->pipeline state to PLAYING
GTK-GLSINK::gst_gtk_gl_sink_event: flush-stop 
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(gst_qtdemux_map_and_push_segments) 
(qtdemux_activate_segment) (video_0) activate segment 0, offset 0:00:07.324000000
(stream_segment_get_boundaries) (video_0) seg_time = 0:00:07.324000000 
(stream_segment_get_boundaries) (video_0) result is start=0:00:07.324000000,stop=0:00:14.995000000,time=0:00:07.324000000
(qtdemux_stream_update_segment) (video_0) new segment 0 from 0:00:07.324000000 to 0:00:14.995000000,time 0:00:07.324000000 
(gst_qtdemux_push_tags) Checking pad qtdemux0:video_0 for tags
(qtdemux_activate_segment) (audio_0) activate segment 0, offset 0:00:07.324000000
(stream_segment_get_boundaries) (audio_0) seg_time = 0:00:07.324000000 
(stream_segment_get_boundaries) (audio_0) result is start=0:00:07.324000000,stop=0:00:15.021666666,time=0:00:07.324000000
(qtdemux_stream_update_segment) (audio_0) new segment 0 from 0:00:07.324000000 to 0:00:15.021666666,time 0:00:07.324000000 
(gst_qtdemux_push_tags) Checking pad qtdemux0:audio_0 for tags
(gst_qtdemux_push_tags) Checking pad qtdemux0:video_0 for tags
(gst_qtdemux_push_tags) Checking pad qtdemux0:audio_0 for tags
(gst_qtdemux_find_sample) 
(qtdemux_move_stream) (video_0) moving to sample 136 of 360 
(qtdemux_move_stream) (audio_0) moving to sample 253 of 647 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 38 to 39 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 8442, file: 0, cur piece: (39) 
(qtdemux_chain) Received buffer size:8442 demux offset:1302278
(qtdemux_chain) pushing in inbuf 0x72d420245390,neededbytes:27666,available: 8442
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 40, call read_piece() on it, current:39
(bt_demux_stream_push_loop) unlock cur:(39)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:39,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(40)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(40), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 40 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(40)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(39), ipc_data->piece(40)
(bt_demux_stream_push_loop) recovery lock (39)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=40, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (40) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 39 to 40 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (40) 
(qtdemux_chain) Received buffer size:32768 demux offset:1302278
(qtdemux_chain) pushing in inbuf 0x72d4202504a0,neededbytes:27666,available: 41210
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 41, call read_piece() on it, current:40
(bt_demux_stream_push_loop) unlock cur:(40)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:40,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(41)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(41), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 41 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(41)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(40), ipc_data->piece(41)
(bt_demux_stream_push_loop) recovery lock (40)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=41, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (41) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 40 to 41 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (41) 
(qtdemux_chain) Received buffer size:32768 demux offset:1329944
(qtdemux_chain) pushing in inbuf 0x72d420245390,neededbytes:18884,available: 46312
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 42, call read_piece() on it, current:41
(bt_demux_stream_push_loop) unlock cur:(41)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:41,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(42)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(42), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 42 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(42)
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(41), ipc_data->piece(42)
(bt_demux_stream_push_loop) recovery lock (41)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=42, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (42) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 41 to 42 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (42) 
(qtdemux_chain) Received buffer size:32768 demux offset:1367542
(qtdemux_chain) pushing in inbuf 0x72d4202459c0,neededbytes:18069,available: 41482
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 43, call read_piece() on it, current:42
(bt_demux_stream_push_loop) unlock cur:(42)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:42,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(43)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(43), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 43 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(43)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(42), ipc_data->piece(43)
(bt_demux_stream_push_loop) recovery lock (42)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=43, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (43) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 42 to 43 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (43) 
(qtdemux_chain) Received buffer size:32768 demux offset:1403648
(qtdemux_chain) pushing in inbuf 0x72d4200f9920,neededbytes:17078,available: 38144
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 44, call read_piece() on it, current:43
(bt_demux_stream_push_loop) unlock cur:(43)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:43,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(44)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(44), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 44 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(44)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(43), ipc_data->piece(44)
(bt_demux_stream_push_loop) recovery lock (43)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=44, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (44) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 43 to 44 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (44) 
(qtdemux_chain) Received buffer size:32768 demux offset:1438362
(qtdemux_chain) pushing in inbuf 0x72d420245f90,neededbytes:18179,available: 36198
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 45, call read_piece() on it, current:44
(bt_demux_stream_push_loop) unlock cur:(44)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:44,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(45)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(45), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 45 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(45)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(44), ipc_data->piece(45)
(bt_demux_stream_push_loop) recovery lock (44)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=45, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (45) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 44 to 45 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (45) 
(qtdemux_chain) Received buffer size:32768 demux offset:1468194
(qtdemux_chain) pushing in inbuf 0x72d4200f9920,neededbytes:18164,available: 39134
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 46, call read_piece() on it, current:45
(bt_demux_stream_push_loop) unlock cur:(45)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:45,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(46)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(46), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 46 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(46)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(45), ipc_data->piece(46)
(bt_demux_stream_push_loop) recovery lock (45)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=46, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (46) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 45 to 46 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (46) 
(qtdemux_chain) Received buffer size:32768 demux offset:1486358
(qtdemux_chain) pushing in inbuf 0x72d420245f90,neededbytes:28401,available: 53738
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 47, call read_piece() on it, current:46
(bt_demux_stream_push_loop) unlock cur:(46)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:46,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(47)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(47), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 47 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(47)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(46), ipc_data->piece(47)
(bt_demux_stream_push_loop) recovery lock (46)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=47, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (47) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 46 to 47 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (47) 
(qtdemux_chain) Received buffer size:32768 demux offset:1534768
(qtdemux_chain) pushing in inbuf 0x72d420199b50,neededbytes:10856,available: 38096
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 48, call read_piece() on it, current:47
(bt_demux_stream_push_loop) unlock cur:(47)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:47,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(48)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(48), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 48 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(48)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(47), ipc_data->piece(48)
(bt_demux_stream_push_loop) recovery lock (47)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=48, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (48) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 47 to 48 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (48) 
GTK-GLSINK::gst_gtk_gl_sink_event: segment 
GTK-GLSINK::gst_gtk_gl_sink_event: tag 
GTK-GLSINK::gst_gtk_gl_sink_event: tag 
(qtdemux_chain) Received buffer size:32768 demux offset:1570760
(qtdemux_chain) pushing in inbuf 0x72d420251ca0,neededbytes:11178,available: 34872
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 49, call read_piece() on it, current:48
(bt_demux_stream_push_loop) unlock cur:(48)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:48,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(49)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(49), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 49 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(49)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(48), ipc_data->piece(49)
(bt_demux_stream_push_loop) recovery lock (48)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=49, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (49) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 48 to 49 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (49) 
(qtdemux_chain) Received buffer size:32768 demux offset:1593779
(qtdemux_chain) pushing in inbuf 0x72d420251f30,neededbytes:11912,available: 44621
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 50, call read_piece() on it, current:49
(bt_demux_stream_push_loop) unlock cur:(49)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:49,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(50)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(50), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 50 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(50)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(49), ipc_data->piece(50)
(bt_demux_stream_push_loop) recovery lock (49)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=50, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (50) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 49 to 50 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (50) 
(qtdemux_chain) Received buffer size:32768 demux offset:1628672
(qtdemux_chain) pushing in inbuf 0x72d420245bb0,neededbytes:10834,available: 42496
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 51, call read_piece() on it, current:50
(bt_demux_stream_push_loop) unlock cur:(50)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:50,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(51)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(51), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 51 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(51)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(50), ipc_data->piece(51)
(bt_demux_stream_push_loop) recovery lock (50)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=51, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (51) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 50 to 51 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (51) 
(qtdemux_chain) Received buffer size:32768 demux offset:1670196
(qtdemux_chain) pushing in inbuf 0x72d420245800,neededbytes:11163,available: 33740
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 52, call read_piece() on it, current:51
(bt_demux_stream_push_loop) unlock cur:(51)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:51,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(52)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(52), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 52 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(52)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(51), ipc_data->piece(52)
(bt_demux_stream_push_loop) recovery lock (51)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=52, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (52) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 51 to 52 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (52) 
(qtdemux_chain) Received buffer size:32768 demux offset:1703080
(qtdemux_chain) pushing in inbuf 0x72d420080cf0,neededbytes:10176,available: 33624
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 53, call read_piece() on it, current:52
(bt_demux_stream_push_loop) unlock cur:(52)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:52,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(53)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(53), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 53 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(53)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(52), ipc_data->piece(53)
(bt_demux_stream_push_loop) recovery lock (52)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=53, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (53) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 52 to 53 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (53) 
(qtdemux_chain) Received buffer size:32768 demux offset:1734596
(qtdemux_chain) pushing in inbuf 0x72d4202507b0,neededbytes:13533,available: 34876
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 54, call read_piece() on it, current:53
(bt_demux_stream_push_loop) unlock cur:(53)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:53,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(54)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(54), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 54 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(54)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(53), ipc_data->piece(54)
(bt_demux_stream_push_loop) recovery lock (53)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=54, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (54) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 53 to 54 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (54) 
(qtdemux_chain) Received buffer size:32768 demux offset:1760125
(qtdemux_chain) pushing in inbuf 0x72d420080cf0,neededbytes:10524,available: 42115
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 55, call read_piece() on it, current:54
(bt_demux_stream_push_loop) unlock cur:(54)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:54,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(55)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(55), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 55 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(55)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(54), ipc_data->piece(55)
(bt_demux_stream_push_loop) recovery lock (54)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=55, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (55) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 54 to 55 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (55) 
(qtdemux_chain) Received buffer size:32768 demux offset:1792923
(qtdemux_chain) pushing in inbuf 0x72d420250be0,neededbytes:11553,available: 42085
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 56, call read_piece() on it, current:55
(bt_demux_stream_push_loop) unlock cur:(55)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:55,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(56)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(56), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 56 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(56)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(55), ipc_data->piece(56)
(bt_demux_stream_push_loop) recovery lock (55)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=56, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (56) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 55 to 56 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (56) 
(qtdemux_chain) Received buffer size:32768 demux offset:1826979
(qtdemux_chain) pushing in inbuf 0x72d420246780,neededbytes:11371,available: 40797
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 57, call read_piece() on it, current:56
(bt_demux_stream_push_loop) unlock cur:(56)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:56,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(57)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(57), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 57 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(57)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(56), ipc_data->piece(57)
(bt_demux_stream_push_loop) recovery lock (56)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=57, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (57) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 56 to 57 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (57) 
(qtdemux_chain) Received buffer size:32768 demux offset:1861373
(qtdemux_chain) pushing in inbuf 0x72d420246e00,neededbytes:11261,available: 39171
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bvw_update_tags) gain video Tags: 0x72d424151860A 
(bvw_update_tags) emit got-metadata 
(on_got_metadata_event) 
(totem_get_nice_name_for_stream) emit_metadata_updated 
(totem-object/on_playlist_change_name)  got title to update player header Japan/ForBiggerBlazes.mp4
(bvw_update_tags) Pipeline sent video tags update with no changes 
(bvw_update_tags) gain audio Tags: 0x72d40c007c40A 
(bvw_update_tags) emit got-metadata 
(on_got_metadata_event) 
(totem_get_nice_name_for_stream) emit_metadata_updated 
(totem-object/on_playlist_change_name)  got title to update player header Japan/ForBiggerBlazes.mp4
(bvw_update_tags) Pipeline sent audio tags update with no changes 
(bvw_update_tags) gain audio Tags: 0x72d40c114fd0A 
(bvw_update_tags) emit got-metadata 
(on_got_metadata_event) 
(totem_get_nice_name_for_stream) emit_metadata_updated 
(totem-object/on_playlist_change_name)  got title to update player header Japan/ForBiggerBlazes.mp4
(bvw_update_tags) gain audio Tags: 0x72d40c116360A 
(bvw_update_tags) emit got-metadata 
(on_got_metadata_event) 
(totem_get_nice_name_for_stream) emit_metadata_updated 
(totem-object/on_playlist_change_name)  got title to update player header Japan/ForBiggerBlazes.mp4
(bt_demux_stream_push_loop) Luckily we have next piece 58, call read_piece() on it, current:57
(bt_demux_stream_push_loop) unlock cur:(57)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:57,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(58)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(58), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 58 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(58)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(57), ipc_data->piece(58)
(bt_demux_stream_push_loop) recovery lock (57)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=58, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (58) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 57 to 58 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (58) 
(qtdemux_chain) Received buffer size:32768 demux offset:1895274
(qtdemux_chain) pushing in inbuf 0x72d420250e60,neededbytes:10045,available: 38038
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 59, call read_piece() on it, current:58
(bt_demux_stream_push_loop) unlock cur:(58)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:58,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(59)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(59), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 59 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(59)
(totem-object/seek_slider_released_cb) enter
-unmark_popup_busy seek started
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(58), ipc_data->piece(59)
(bt_demux_stream_push_loop) recovery lock (58)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=59, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (59) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 58 to 59 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (59) 
(qtdemux_chain) Received buffer size:32768 demux offset:1925094
(qtdemux_chain) pushing in inbuf 0x72d420246570,neededbytes:12593,available: 40986
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 60, call read_piece() on it, current:59
(bt_demux_stream_push_loop) unlock cur:(59)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:59,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(60)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(60), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 60 
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(59), ipc_data->piece(60)
(bt_demux_stream_push_loop) recovery lock (59)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=60, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (60) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 59 to 60 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (60) 
(qtdemux_chain) Received buffer size:32768 demux offset:1956945
(qtdemux_chain) pushing in inbuf 0x72d420251ce0,neededbytes:9772,available: 41903
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 61, call read_piece() on it, current:60
(bt_demux_stream_push_loop) unlock cur:(60)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:60,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(60)
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(61)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(60), ipc_data->piece(61)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(61), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 61 
(bt_demux_stream_push_loop) recovery lock (60)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=61, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (61) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 60 to 61 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (61) 
(qtdemux_chain) Received buffer size:32768 demux offset:1994301
(qtdemux_chain) pushing in inbuf 0x72d42007c890,neededbytes:8525,available: 37315
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(61)
(gst_bt_demux_change_state) GstTaskState is 0, transition is 28
(bvw_bus_message_cb) In GST_MESSAGE_ASYNC_DONE case: Maybe starting deferred playback after seek
(bacon_video_widget_play) cur_state:PLAYING
(bvw_bus_message_cb) bvw-pipeline changed state from PAUSED to PLAYING
(bvw_bus_message_cb) resume updating slider and time label
(bvw_reconfigure_tick_timeout) adding tick timeout (at 200ms) 
(bvw_update_tags) gain audio Tags: 0x72d40c003560A 
(bvw_update_tags) emit got-metadata 
(on_got_metadata_event) 
(totem_get_nice_name_for_stream) emit_metadata_updated 
(totem-object/on_playlist_change_name)  got title to update player header Japan/ForBiggerBlazes.mp4
(totem-object/seek_slider_changed_cb) both enter 
(totem-object/seek_slider_changed_cb) seek_lock == FALSE 
(bt_demux_stream_push_loop) Luckily we have next piece 62, call read_piece() on it, current:61
(bt_demux_stream_push_loop) unlock cur:(61)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:61,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(62)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(62), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 62 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(62)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(61), ipc_data->piece(62)
(bt_demux_stream_push_loop) recovery lock (61)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=62, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (62) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 61 to 62 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (62) 
(qtdemux_chain) Received buffer size:32768 demux offset:2023426
(qtdemux_chain) pushing in inbuf 0x72d420246e00,neededbytes:9380,available: 40958
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 63, call read_piece() on it, current:62
(bt_demux_stream_push_loop) unlock cur:(62)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:62,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(63)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(63), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 63 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(63)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(62), ipc_data->piece(63)
(bt_demux_stream_push_loop) recovery lock (62)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=63, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (63) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 62 to 63 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (63) 
(qtdemux_chain) Received buffer size:32768 demux offset:2060885
(qtdemux_chain) pushing in inbuf 0x72d420241f00,neededbytes:8769,available: 36267
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 64, call read_piece() on it, current:63
(bt_demux_stream_push_loop) unlock cur:(63)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:63,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(64)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(64), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 64 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(64)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(63), ipc_data->piece(64)
(bt_demux_stream_push_loop) recovery lock (63)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=64, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (64) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 63 to 64 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (64) 
(qtdemux_chain) Received buffer size:32768 demux offset:2088552
(qtdemux_chain) pushing in inbuf 0x72d420246690,neededbytes:26198,available: 41368
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 65, call read_piece() on it, current:64
(bt_demux_stream_push_loop) unlock cur:(64)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:64,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(65)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(65), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 65 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(65)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(64), ipc_data->piece(65)
(bt_demux_stream_push_loop) recovery lock (64)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=65, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (65) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 64 to 65 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (65) 
(qtdemux_chain) Received buffer size:32768 demux offset:2120056
(qtdemux_chain) pushing in inbuf 0x72d420245030,neededbytes:15430,available: 42632
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(totem-object/seek_slider_changed_cb) both enter 
(totem-object/seek_slider_changed_cb) seek_lock == FALSE 
(totem-object/seek_slider_changed_cb) both enter 
(totem-object/seek_slider_changed_cb) seek_lock == FALSE 
(bt_demux_stream_push_loop) Luckily we have next piece 66, call read_piece() on it, current:65
(bt_demux_stream_push_loop) unlock cur:(65)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:65,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(66)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(66), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 66 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(66)
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(65), ipc_data->piece(66)
(bt_demux_stream_push_loop) recovery lock (65)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=66, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (66) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 65 to 66 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (66) 
(qtdemux_chain) Received buffer size:32768 demux offset:2161058
(qtdemux_chain) pushing in inbuf 0x72d42007b4b0,neededbytes:3834,available: 34398
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(bt_demux_stream_push_loop) Luckily we have next piece 67, call read_piece() on it, current:66
(bt_demux_stream_push_loop) unlock cur:(66)
bt_demux_stream_push_loop, END 
(bt_demux_stream_push_loop) FIRE src_00 [start piece idx:39, end piece idx:76],current_piece:66,pad task state 0 
(bt_demux_stream_push_loop) decodebin ghost sink pad is ok to have target
(bt_demux_handle_alert) BEGIN in read_piece_alert, piece idx:(67)
(bt_demux_handle_alert) in read_piece_alert, piece_idx on alert(aka ipc_data->piece)=(67), size=32768 
(bt_demux_handle_alert) stream-idx(0) in read_piece_alert, Start the pad task(bt_demux_stream_push_loop) 67 
(gst_bt_demux_handle_alert) judge whether this read piece belongs to this stream
(bt_demux_handle_alert) EXIT in read_piece_alert, piece idx:(67)
(bt_demux_stream_push_loop) have_type emitted, proceeding 
(bt_demux_stream_push_loop) waiting lock thiz->current_piece(66), ipc_data->piece(67)
(bt_demux_stream_push_loop) recovery lock (66)
(gst_bt_demux_buffer_new) thiz->start_piece=39, piece=67, this buffer actual size:32768 
(bt_demux_stream_push_loop) Received piece (67) of size 32768 and actual size 32768 on file 0 
(bt_demux_stream_push_loop) Modifying thiz->current_piece from 66 to 67 
(bt_demux_stream_push_loop) Pushing buffer, actual size: 32768, file: 0, cur piece: (67) 
(qtdemux_chain) Received buffer size:32768 demux offset:2191695
(qtdemux_chain) pushing in inbuf 0x72d420246450,neededbytes:5309,available: 36529
(gst_qtdemux_process_adapter) demux->state=<MOVIE> 
(totem-object/seek_slider_changed_cb) both enter 
(totem-object/seek_slider_changed_cb) seek_lock == FALSE 
(totem-object/seek_slider_changed_cb) both enter 
(totem-object/seek_slider_changed_cb) seek_lock == FALSE 
^C
pal@pal-desktop79:/media/pal/E/GnomeApp/totem-gstbt/install/bin$ 
